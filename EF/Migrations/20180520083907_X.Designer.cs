// <auto-generated />
using System;
using EFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFC.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180520083907_X")]
    partial class X
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.testhilo", "'testhilo', '', '1', '100', '1', '2147483647', 'Int64', 'False'")
                .HasAnnotation("SqlServer:HiLoSequenceName", "testhilo")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

            modelBuilder.Entity("Domain.ArchivalCategoty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Years");

                    b.HasKey("Id");

                    b.ToTable("ArchivalCategoty");
                });

            modelBuilder.Entity("Domain.DocumentationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("ArchivalCategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ArchivalCategoryId");

                    b.ToTable("DocumentationType");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "testhilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");
                });

            modelBuilder.Entity("Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "testhilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Test");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Domain.PackageDocumentationTypeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("PackageId");

                    b.Property<int?>("TypeId");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("TypeId");

                    b.ToTable("PackageDocumentationTypeInfo");
                });

            modelBuilder.Entity("Domain.OrderForHire", b =>
                {
                    b.HasBaseType("Domain.Order");


                    b.ToTable("OrderForHire");

                    b.HasDiscriminator().HasValue("OrderForHire");
                });

            modelBuilder.Entity("Domain.OrderForScans", b =>
                {
                    b.HasBaseType("Domain.Order");


                    b.ToTable("OrderForScans");

                    b.HasDiscriminator().HasValue("OrderForScans");
                });

            modelBuilder.Entity("Domain.DocumentationType", b =>
                {
                    b.HasOne("Domain.ArchivalCategoty", "ArchivalCategory")
                        .WithMany()
                        .HasForeignKey("ArchivalCategoryId");
                });

            modelBuilder.Entity("Domain.Package", b =>
                {
                    b.OwnsOne("Domain.PackageNumber", "Number", b1 =>
                        {
                            b1.Property<int?>("PackageId");

                            b1.Property<string>("Value");

                            b1.ToTable("Packages");

                            b1.HasOne("Domain.Package")
                                .WithOne("Number")
                                .HasForeignKey("Domain.PackageNumber", "PackageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.PackageStatus", "Status", b1 =>
                        {
                            b1.Property<int?>("PackageId");

                            b1.Property<string>("Value")
                                .IsRequired();

                            b1.ToTable("Packages");

                            b1.HasOne("Domain.Package")
                                .WithOne("Status")
                                .HasForeignKey("Domain.PackageStatus", "PackageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.PackageDocumentationTypeInfo", b =>
                {
                    b.HasOne("Domain.Package")
                        .WithMany("DocumentationTypeInfos")
                        .HasForeignKey("PackageId");

                    b.HasOne("Domain.DocumentationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Domain.OrderForHire", b =>
                {
                    b.OwnsOne("Domain.OrderForHireStatus", "Status", b1 =>
                        {
                            b1.Property<int?>("OrderForHireId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("Status");

                            b1.ToTable("Orders");

                            b1.HasOne("Domain.OrderForHire")
                                .WithOne("Status")
                                .HasForeignKey("Domain.OrderForHireStatus", "OrderForHireId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.OrderForScans", b =>
                {
                    b.OwnsOne("Domain.OrderForScansStatus", "Status", b1 =>
                        {
                            b1.Property<int?>("OrderForScansId");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("Status");

                            b1.ToTable("Orders");

                            b1.HasOne("Domain.OrderForScans")
                                .WithOne("Status")
                                .HasForeignKey("Domain.OrderForScansStatus", "OrderForScansId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
